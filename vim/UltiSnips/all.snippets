priority -1

global !p

def maybe_comma(snip):
    return "," if snip.ft == "json" else ""

endglobal

snippet () "Literal function parentheses" i
(${1:args})$0
endsnippet

snippet and "&& operator" i
&& $0
endsnippet

snippet equal "= operator" i
= $0
endsnippet

snippet equals "== operator" i
== $0
endsnippet

snippet "less than" "<"
< 
endsnippet

snippet "(array|list)" "Literal array/list" ri
[$1]$0
endsnippet

snippet "more than" "<"
> 
endsnippet

snippet "not (equal(s)?|=)" "!= operator" ri
!= $0
endsnippet

snippet string "Literal string" i
"$1"$0
endsnippet

### Plover ###

snippet "(alt|control|option|shift|super)" "Plover modifier keystroke" ri
`!p
modifier = match.group(1).upper()
modifier = "ALT" if modifier == "OPTION" else modifier
snip.rv = modifier
`(${1:KEY})$0
endsnippet

snippet command "Plover control command" i
{#${1:COMMAND}}
endsnippet

snippet "command shell" "Plover shell command" i
{:COMMAND:SHELL:bash -ci 'osascript $STENO_COMMAND/${1:directory}/${2:script}.scpt'}
endsnippet

# Specifically for steno dictionary entries.
# Copy a single/multi-stroke outline from the steno tape and it gets auto-filled
# by the snippet, swapping out new line characters for slashes.
# Final substitution is just to remove my final "copy" (KP*EU) brief from the
# entry, as sometimes gets highlighted in the Plover paper tape.
snippet steno "String steno dictionary entry" b
"${1:`!v substitute(@+, '\n', '/', 'g')->substitute('\/KP\*EU$\|\s', '', 'g')`}": "${2:value}"`!p snip.rv = maybe_comma(snip)`$0
endsnippet

snippet "steno ([AaBbDdEeFfGgHhKkLlOoPpRrSsTtUuWwZz0-9\*\/\-]+)" "String steno dictionary entry with outline" ri
`!p
outline = match.group(1).upper()
`"${1:`!p snip.rv = outline`}": "${2:value}"`!p snip.rv = maybe_comma(snip)`$0
endsnippet
