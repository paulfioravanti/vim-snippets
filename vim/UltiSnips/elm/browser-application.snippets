global !p

# ~/.vim/pythonx/vim_pythonx_helpers.py
from vim_pythonx_helpers import (
    autojump_if_blank,
    make_context,
    make_jumper
)

# ~/.vim/pythonx/elm_helpers.py
from elm_helpers import (
    flags_text,
    maybe_flags
)

endglobal

snippet "main application" "Browser.application main function" b
main : Program ${1|Flags,()|} Model Msg
main =
    Browser.application
        { init = ${2:init}
        , update = ${3:update}
        , view = ${4:view}
        , subscriptions = ${5:subscriptions}
        , onUrlRequest = ${6:UrlRequested UrlRequest}
        , onUrlChange = ${7:UrlChanged Url}
        }$0
endsnippet

snippet "init application" "Browser.application init function" b
init : ${1|Flags,()|} -> Url -> Key -> ( Model, Cmd Msg )
init `!p snip.rv = flags_text(t[1])` url key =
    ( ${2:Model.init`!p snip.rv = maybe_flags(t[1])` url (Just key)}
    , ${3:Navigation.pushUrl key (Url.toString url)}
    )$0
endsnippet

context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet "^update application" "Browser.application update function" r
`!p autojump_if_blank(snip, [1])
`update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        ${1:SomeMsg ->
            (model, Cmd.none)}$0
endsnippet

context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet "^view application" "Browser.application view function" r
`!p autojump_if_blank(snip, [1])
`view : Model -> Document Msg
view model =
    ${1:{ title = ${2:title}
    , body = ${3:body}
    }}$0
endsnippet

context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet "^subscriptions application" "Browser.application subscriptions function" r
`!p autojump_if_blank(snip, [1])
`subscriptions : Model -> Sub Msg
subscriptions model =
    ${1:Sub.none}$0
