global !p

# ~/.vim/pythonx/elm/json_decode.py
from elm.json_decode import (
    build_map_function,
    decode_primative_name,
    decoder_default_text
)

endglobal

snippet "[Dd]ecode[\s\.]at" "Json.Decode.at" r
${1:Json.}Decode.at ["${2:field1}"${3:, "${4:field2}"}$5]${6: ${7:decoder}}$0
endsnippet

snippet "[Dd]ecode[\s\.](bool|float|int(?:eger)?|string)" "Json.Decode.bool|float|int|string" r
${1:Json.}Decode.`!p snip.rv = decode_primitive_name(match.group(1))`$0
endsnippet

snippet "[Dd]ecode[\s\.]field( (?:bool|float|int(?:eger)?|string))?" "Json.Decode.field" r
${1:Json.}Decode.field "${2:fieldName}"${3: ${4:`!p snip.rv = decoder_default_text(match, t[1])`}}$0
endsnippet

snippet "[Dd]ecode[\s\.]index" "Json.Decode.index" r
${1:Json.}Decode.index ${2:index}${3: ${4:decoder}}$0
endsnippet

snippet "[Dd]ecode[\s\.]map" "Json.Decode.map" r
${1:Json.}Decode.map ${2:valueFunction}${3: ${4:Decoder}}$0
endsnippet

post_jump "build_map_function(snip, int(match.group(1)))"
snippet "[Dd]ecode[\s\.]map\s?([2-8])" "Json.Decode.map2-8" r
$0
endsnippet

snippet "[Dd]ecode[\s\.]succeed" "Json.Decode.succeed" r
${1:Json.}Decode.succeed${2: ${3:DecodeType}}$0
endsnippet
