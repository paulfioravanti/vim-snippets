global !p

# ~/.vim/pythonx/global_helpers.py
from global_helpers import (
    maybe_comma,
    maybe_surround
)

endglobal

snippet ".all(/?)?" "all?(pattern) {|element| ... } → true or false" ri
.all?${1:${2:(${3:pattern})}${4:`!p snip.rv = maybe_surround(t[5], "<<")`${5|inline block,do block,explicit block,local proc,local method,external method|}`!p snip.rv = maybe_surround(t[5], ">>")`}}$0
endsnippet

snippet ".each(_| )slice" ".each_slice(n) { ... } → self" ri
.each_slice(${1:n})${2:`!p snip.rv = maybe_surround(t[3], "<<")`${3|inline block,do block,explicit block,local proc,local method,external method|}`!p snip.rv = maybe_surround(t[3], ">>")`}$0
endsnippet

snippet ".each with object" "each_with_object(object) { |(*args), memo_object| ... } → object" i
.each_with_object(${1:object})${2:`!p snip.rv = maybe_surround(t[3], "<<")`${3|inline block,do block,explicit block,local proc,local method,external method|}`!p snip.rv = maybe_surround(t[3], ">>")`}$0
endsnippet

snippet "\.(map|collect)" "map {|element| ... } → array" ri
.`!p snip.rv = match.group(1)`${1|inline block,do block,explicit block,local proc,local method,external method|}$0
endsnippet

snippet "\.(reduce|inject)" "reduce(initial_operand) {|memo, operand| ... } → object" ri
.`!p snip.rv = match.group(1)`(${1:initial_value}`!p snip.rv = maybe_comma(t[1], t[2])`${2::${3:symbol}})${4:`!p snip.rv = maybe_surround(t[5], "<<")`${5|inline block,do block,explicit block,local proc,local method,external method|}`!p snip.rv = maybe_surround(t[5], ">>")`}$0
endsnippet

snippet .sum ".sum(initial_value = 0) {|element| ... }" i
.sum${1:(${2:initial_value})}${3:`!p snip.rv = maybe_surround(t[4], "<<")`${4|inline block,do block,explicit block,local proc,local method,external method|}`!p snip.rv = maybe_surround(t[4], ">>")`}$0
endsnippet
