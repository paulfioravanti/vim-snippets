global !p

# ~/.vim/pythonx/global_helpers.py
from global_helpers import (
    maybe_comma,
    maybe_surround
)

endglobal

snippet "attr (reader|writer|accessible)" "attr_* methods" br
attr_`!p snip.rv = match.group(1)` :${1:method_name}$0
endsnippet

snippet ".each(_| )slice" ".each_slice(n) { ... }" ri
.each_slice(${1:n})${2:`!p snip.rv = maybe_surround(t[3], "<<")`${3|inline block,do block,explicit block,local proc,local method,external method|}`!p snip.rv = maybe_surround(t[3], ">>")`}$0
endsnippet

snippet ".each with object" "Enumerable#each_with_object" i
.each_with_object(${1:object})${2:`!p snip.rv = maybe_surround(t[3], "<<")`${3|inline block,do block,explicit block,local proc,local method,external method|}`!p snip.rv = maybe_surround(t[3], ">>")`}$0
endsnippet

snippet "\.end(s)? with" ".end_with? method" ri
.end_with?("${1:string}")$0
endsnippet

snippet .gsub ".gsub(pattern, replacement)" i
.gsub(${1:pattern}`!p snip.rv = maybe_comma(t[1], t[2])`${2:replacement})$0
endsnippet

snippet "\.gsub block" ".gsub(pattern) {|match| ... }" ri
.gsub(${1:pattern}) { |${1:match}| $2 }$0
endsnippet

snippet "(\.(map|then))" ".(map|then) methods" ri
`!p snip.rv = match.group(1)`${1|inline block,do block,explicit block,local proc,local method,external method|}$0
endsnippet

snippet "(?<!/)\.match\?" "match?(pattern, offset = 0) method" ri
.match?(${1:pattern}`!p snip.rv = maybe_comma(t[1], t[2])`${2:offset})$0
endsnippet

snippet "(?<=/)\.match\?" "/regex/.match?(string) method" ri
.match?(${1:string})$0
endsnippet

snippet .modulo "modulo(p1)" i
.modulo(${1:n})$0
endsnippet

snippet .reduce "Enumerable#reduce" i
.reduce(${1:initial_value}`!p snip.rv = maybe_comma(t[1], t[2])`${2::${3:symbol}})${4:`!p snip.rv = maybe_surround(t[5], "<<")`${5|inline block,do block,explicit block,local proc,local method,external method|}`!p snip.rv = maybe_surround(t[5], ">>")`}$0
endsnippet

snippet .sum ".sum(initial_value = 0) {|element| ... }" i
.sum${1:(${2:initial_value})}${3:`!p snip.rv = maybe_surround(t[4], "<<")`${4|inline block,do block,explicit block,local proc,local method,external method|}`!p snip.rv = maybe_surround(t[4], ">>")`}$0
endsnippet
