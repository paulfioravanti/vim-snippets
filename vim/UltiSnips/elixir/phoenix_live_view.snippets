global !p

# ~/.vim/pythonx/vim_pythonx_helpers.py
from vim_pythonx_helpers import (
    autojump_if_blank,
    make_context,
    make_jumper
)

# ~/.vim/pythonx/global_helpers.py
from global_helpers import (
    closing_character
)

# ~/.vim/pythonx/elixir_helpers.py
from elixir_helpers import (
    to_module_name
)

from .phoenix_live_view import (
    key_closing,
    module_parts
)

endglobal

# NOTE: Choice tabstops cannot be used to select between a potential
# assign="x" or assign={x} due to issues around having no spaces between the
# choice tabstop definition. Might be a bug with Ultisnips...

context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet assign "Phoenix.LiveView.assign(socket_or_assigns, key, value)" w
`!p autojump_if_blank(snip, [1])
`assign(${1:socket, }${2::}${3:key}`!p snip.rv = key_closing(t[2])` ${4:$3})$0
endsnippet

context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet "assign new" "Phoenix.LiveView.assign_new(socket_or_assigns, key, fun)" w
`!p autojump_if_blank(snip, [1])
`assign_new(${1:${2|assigns,socket|}, }:${3:key}, fn -> ${4:do_something} end)$0
endsnippet

snippet component "Phoenix.LiveView.Helpers.component/2" b
<${1:Module}.${2:function}
  ${3:assign}=${4:"}${5:value}`!p snip.rv = closing_character(t[4])`$6
/>$0
endsnippet

snippet "connected\??" "Phoenix.LiveView.connected?/1" r
connected?(socket)$0
endsnippet

context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet form "Phoenix.LiveView.Helpers.form(assigns)" b
`!p autojump_if_blank(snip, [3, 5, 7, 9])
`<.form
  let={${1:f}}
  for={${2:@changeset}}
  ${3:id="${4:form-id}"}
  ${5:phx-target={${6:@myself}}}
  ${7:phx-change="${8:validate}"}
  ${9:phx-submit="${10:save}"}>

  $0

  <div>
    <%= submit "${11:Save}"${12:, phx_disable_with: "${13:Saving...}"} %>
  </div>
</.form>
endsnippet

context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet "\bhandle[_ ]event" "Phoenix.(LiveView|LiveComponent).handle_event(event, unsigned_params, socket)" r
`!p autojump_if_blank(snip, [4])
`@impl true
def handle_event("${1:event}", ${2|params,_unsigned_params|}, socket) do
  ${4:socket = ${5:assign(socket, ${6::}${7:key}`!p snip.rv = key_closing(t[6])` ${8:$7})}}$0
  ${3|{:noreply\, socket},{:reply\, reply_map\, socket}|}
end
endsnippet

snippet heex "Phoenix.LiveView.Helpers.sigil_H/2" b
~H"""
$0
"""
endsnippet

snippet "\blive[_ ]component" "Phoenix.LiveView.Helpers.live_component(assigns)" r
`!p
module, file = module_parts(path)
`<.live_component
  module={`!p snip.rv = module`.${1:`!p snip.rv = file`}Component}
  id={${2:live-component-id}}$0
/>
endsnippet

context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet "\blive[_ ]patch" "Phoenix.LiveView.Helpers.live_patch/2" r
`!p autojump_if_blank(snip, [1, 5, 7, 8])
`<%= live_patch${1: "${2:text}",} to: Routes.${3:path_function}(@socket, :${4:action}${5:, ${6:param}})${7:, replace: true} ${8:do %>
  $9
<% end %>}`!p snip.rv = "" if t[8] else "%>"`$0
endsnippet

context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet "live route" "Phoenix.LiveView.Router.live(path, live_view, action \\ nil, opts \\ [])" b
`!p autojump_if_blank(snip, [3, 5])
`live "/${1:path}", ${2:`!p snip.rv = to_module_name(t[1])`}Live${3:, :${4:action}${5:, ${6:opts}}}$0
endsnippet

context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet mount "Phoenix.LiveView.mount(params, session, socket)" b
`!p autojump_if_blank(snip, [2, 3])
`@impl true
def mount(${1|params,_params,:not_mounted_at_router|}, ${2:_}session, socket) do
  ${3:socket = ${4:assign(socket, ${5::}${6:key}`!p snip.rv = key_closing(t[5])` ${7:$6}}})$0
  {:ok, socket}
end
endsnippet

snippet render "Phoenix.(LiveView|LiveComponent).render(assigns)" b
@impl true
def render(assigns) do
  ~H"""
  $0
  """
end
endsnippet

snippet "\btemporary[_ ]assigns" "temporary_assigns parameter" r
temporary_assigns: [${1:assign}: ${2:reset_value}]$0
endsnippet

snippet update "Phoenix.LiveView.update(socket_or_assigns, key, fun)" w
update(${1|socket,assigns|}, :${2:key}, ${3:fun})$0
endsnippet
