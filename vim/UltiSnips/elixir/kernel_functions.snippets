global !p

# ~/.vim/pythonx/vim_pythonx_helpers.py
from vim_pythonx_helpers import (
    autojump_if_blank,
    make_context,
    make_jumper
)

endglobal

snippet "(abs|floor)" "Kernel.(abs|floor)/1" r
${1:Kernel.}`!p snip.rv = match.group(1)`(${2:number})$0
endsnippet

snippet apply "Kernel.apply/(2|3)" i
${1:Kernel.}apply(${2:${3:module}, }${4:${5:function}, }args)$0
endsnippet

snippet "binary[_ ]part" "Kernel.binary_part/(2|3) choice" r
binary_part/${1|2,3|}$0
endsnippet

snippet "binary[_ ]part/2" "Kernel.binary_part/2" r
${1:Kernel.}binary_part(${2:${3:binary}, }${4:range})$0
endsnippet

snippet "binary[_ ]part/3" "Kernel.binary_part/3" r
${1:Kernel.}binary_part(${2:${3:binary}, }${4:start}, ${5:size})$0
endsnippet

snippet "(bit|byte)[_ ]size" "Kernel.(bit_size|byte_size)/1" r
${1:Kernel.}`!p snip.rv = match.group(1)`_size(${2:bitstring})$0
endsnippet

snippet "ceil(ing)?" "Kernel.ceil/1" r
${1:Kernel.}ceil(${2:number})$0
endsnippet

snippet "de?bu?g" "Kernel.hd/1" r
${1:Kernel.}dbg(${2:${3:code \\\ quote do binding() end}, }${4:options \\\ []})$0
endsnippet

context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet "\bdef\s?guard" "Kernel.(defguard|defguardp)/1" r
`!p autojump_if_blank(snip, [1])
`defguard${1:p} ${2:guard}(${3:value}) when ${4:condition}$0
endsnippet

snippet "(?<!floor[_ ])div(ision)?" "Kernel.div/2" r
${1:Kernel.}div(${2:${3:dividend}, }${4:divisor})$0
endsnippet

snippet "(?<!put[_ ])elem(ent)?" "Kernel.elem/2" r
${1:Kernel.}elem(${2:${3:tuple}, }${4:index})$0
endsnippet

snippet exit "Kernel.exit/1" i
${1:Kernel.}exit(${2|:normal,:shutdown,exit shutdown tuple|})$0
endsnippet

snippet "exit shutdown tuple" "Kernel.exit/1 shutdown tuple choice" i
{:shutdown, ${1:term or integer}}$0
endsnippet

snippet "function[_ ]exported\??" "Kernel.function_exported/3" r
${1:Kernel.}function_exported?(${2:${3:module}, }${4:function}, ${5:arity})$0
endsnippet

snippet "(h(ea)?d|t(ai)?l)" "Kernel.(hd|tail)/1" r
${1:Kernel.}`!p snip.rv = match.group(1)`(${2:list})$0
endsnippet

snippet "put[_ ]elem" "Kernel.put_elem/3" r
${1:Kernel.}put_elem(${2:${3:tuple}, }${4:index}, ${5:value})$0
endsnippet
