global !p

# ~/.vim/pythonx/vim_pythonx_helpers.py
from vim_pythonx_helpers import (
    autojump_if_blank,
    make_context,
    make_jumper
)

# ~/.vim/pythonx/global_helpers.py
from global_helpers import (
    maybe_comma
)

endglobal

snippet "(abs|floor)" "Kernel.(abs|floor)/1" r
${1:Kernel.}`!p snip.rv = match.group(1)`(${2:number})$0
endsnippet

snippet apply "Kernel.apply/(2|3)" i
${1:Kernel.}apply(${2:${3:module}, }${4:${5:function}, }args)$0
endsnippet

snippet "binary[_ ]part" "Kernel.binary_part/(2|3) choice" r
binary_part/${1|2,3|}$0
endsnippet

snippet "binary[_ ]part/2" "Kernel.binary_part/2" r
${1:Kernel.}binary_part(${2:${3:binary}, }${4:range})$0
endsnippet

snippet "binary[_ ]part/3" "Kernel.binary_part/3" r
${1:Kernel.}binary_part(${2:${3:binary}, }${4:start}, ${5:size})$0
endsnippet

snippet "(bit|byte)[_ ]size" "Kernel.(bit_size|byte_size)/1" r
${1:Kernel.}`!p snip.rv = match.group(1)`_size(${2:bitstring})$0
endsnippet

snippet "ceil(ing)?" "Kernel.ceil/1" r
${1:Kernel.}ceil(${2:number})$0
endsnippet

snippet "de?bu?g" "Kernel.hd/1" r
${1:Kernel.}dbg(${2:${3:code \\\ quote do binding() end}, }${4:options \\\ []})$0
endsnippet

context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet "\bdef\s?guard" "Kernel.(defguard|defguardp)/1" r
`!p autojump_if_blank(snip, [1])
`defguard${1:p} ${2:guard}(${3:value}) when ${4:condition}$0
endsnippet

snippet "(?<!floor[_ ])div(ision)?" "Kernel.div/2" r
${1:Kernel.}div(${2:${3:dividend}, }${4:divisor})$0
endsnippet

snippet "(?<!put[_ ])elem(ent)?" "Kernel.elem/2" r
${1:Kernel.}elem(${2:${3:tuple}, }${4:index})$0
endsnippet

snippet exit "Kernel.exit/1" i
${1:Kernel.}exit(${2|:normal,:shutdown,exit shutdown tuple|})$0
endsnippet

snippet "exit shutdown tuple" "Kernel.exit/1 shutdown tuple choice" i
{:shutdown, ${1:term or integer}}$0
endsnippet

snippet "function[_ ]exported\??" "Kernel.function_exported/3" r
${1:Kernel.}function_exported?(${2:${3:module}, }${4:function}, ${5:arity})$0
endsnippet

snippet "get[_ ]and[_ ]update[_ ]in" "Kernel.get_and_update_in/3" r
${1:Kernel.}get_and_update_in(${2:${3:data}, }${4:keys}, function$5)$0
endsnippet

snippet "get[_ ]in" "Kernel.get_in/2" r
${1:Kernel.}get_in(${2:${3:data}, }${4:opts}$5)$0
endsnippet

snippet "(h(ea)?d|length|t(ai)?l)" "Kernel.(hd|length|tail)/1" r
${1:Kernel.}`!p snip.rv = match.group(1)`(${2:list})$0
endsnippet

context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet "[kK]ernel[\\. ]inspect" "Kernel.inspect/2" r
`!p autojump_if_blank(snip, [2])
`${1:Kernel}.inspect(${2:term}${3:`!p snip.rv = maybe_comma(t[2], t[4])`${4:opts}}$5)$0
endsnippet

snippet "is[_ ](atom|binary|bitstring|boolean|float|integer|list|map|non[_ ]struct[_ ]map|number|pid|port|reference|tuple)" "Kernel.is_(atom|binary|bitstring|boolean|float|integer|list|map|non_struct_map|number|pid|port|reference|tuple)/1" r
`!p term = match.group(1).replace(" ", "_")
`${1:Kernel.}is_`!p snip.rv = term`(${2:term})$0
endsnippet

context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet "is[_ ](exception|struct)" "Kernel.is_(exception|struct)/(1|2)" r
`!p autojump_if_blank(snip, [2])
`${1:Kernel.}is_`!p snip.rv = match.group(1)`(${2:term}`!p snip.rv = maybe_comma(t[2], t[3])`${3:name})$0
endsnippet

context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet "is[_ ]function" "Kernel.is_function/(1|2)" r
`!p autojump_if_blank(snip, [2])
`${1:Kernel.}is_function(${2:term}`!p snip.rv = maybe_comma(t[2], t[3])`${3:arity})$0
endsnippet

context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet "is[_ ]map[_ ]key" "Kernel.is_map_key/2" r
`!p autojump_if_blank(snip, [2])
`${1:Kernel.}is_map_key(${2:${3:map}, }${4:key})$0
endsnippet

snippet "macro[_ ]exported\??" "Kernel.macro_exported?/3" r
${1:Kernel.}macro_exported?(${2:${3:module}, }${4:macro}, ${5:arity})$0
endsnippet

snippet "make[_ ]ref" "Kernel.make_ref/0" r
${1:Kernel.}make_ref()$0
endsnippet

snippet "map[_ ]size" "Kernel.map_size/1" r
${1:Kernel.}map_size(${2:map})$0
endsnippet

context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet "((?<!min[_ ])max|min)(?:imum|$)" "Kernel.(max|min)/2" r
`!p autojump_if_blank(snip, [2])
`${1:Kernel.}`!p snip.rv = match.group(1)`(${2:${3:first}, }${4:second})$0
endsnippet

snippet "put[_ ]elem" "Kernel.put_elem/3" r
${1:Kernel.}put_elem(${2:${3:tuple}, }${4:index}, ${5:value})$0
endsnippet
