global !p

# ~/.vim/pythonx/vim_pythonx_helpers.py
from vim_pythonx_helpers import (
    autojump_if_blank,
    make_context,
    make_jumper
)

# ~/.vim/pythonx/global_helpers.py
from global_helpers import (
    closing_character,
    maybe
)

# ~/.vim/pythonx/elixir_helpers.py
from elixir_helpers import (
    module_name,
    root_module_name
)

_SINGLE_LINE_DO = ", do: "

endglobal

context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet "\bdef" "Kernel.(def|defp)/2 multiline" r
`!p autojump_if_blank(snip, [1, 3, 5])
`def${1:p} ${2:name}${3:(${4:args})}${5: do
  $6
end}`!p snip.rv = maybe(t[5], _SINGLE_LINE_DO)`$0
endsnippet

context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet "\bdef(:| single line)" "Kernel.(def|defp)/2 single line" r
`!p autojump_if_blank(snip, [1, 3])
`def${1:p} ${2:function_name}${3:(${4:args})}, do: $0
endsnippet

context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet "\bdef\s?delegate" "Kernel.defdelegate/2" r
`!p autojump_if_blank(snip, [3])
`defdelegate ${1:fun}, to: ${2:Module}${3:, as: ${4:fun}}$0
endsnippet

snippet "\bdef\s?exception" "Kernel.defexception/1" r
defexception [:${1:field}$2]$0
endsnippet

context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet "\bdef\s?impl(mentation)?" "Kernel.defimpl/3" r
`!p autojump_if_blank(snip, [2])
`defimpl ${1:Name}, for: ${2:[}${3:Type}$4`!p snip.rv = closing_character(t[2])` do
  $0
end
endsnippet

context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet "\bdef\s?macro" "Kernel.(defmacro|defmacrop)/2 multiline" r
`!p autojump_if_blank(snip, [1, 3])
`defmacro${1:p} ${2:name}${3:(${4:args})} do
  $0
end
endsnippet

snippet "\bdef\s?(module|protocol)" "Kernel.def(module|protocol)/2" r
def`!p snip.rv = match.group(1)` ${1:`!p snip.rv = module_name(path)`} do
  $0
end
endsnippet

snippet "\bdef\s?overridable" "Kernel.defoverridable/1" r
defoverridable ${1:keywords_or_behaviour}$0
endsnippet

snippet "\bdef\s?struct" "Kernel.defstruct/1" r
defstruct ${1:[}:${2:field}$3`!p snip.rv = closing_character(t[1])`$0
endsnippet

snippet destructure "Kernel.destructure/2" i
destructure(${1:left}, ${2:right})$0
endsnippet

context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet "\b(if|unless)" "Kernel.(if|unless)/2" r
`!p autojump_if_blank(snip, [3])
snip.rv = match.group(1)` ${1:condition} do
  ${2:${VISUAL:# do something}}${3:
else
  ${4:# do something else}}
end$0
endsnippet

context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet "\b(if|unless):" "Kernel.(if|unless)/2 single-line" r
`!p autojump_if_blank(snip, [3])
snip.rv = match.group(1)` ${1:condition}, do: ${2:${VISUAL}}${3:, else: $4}$0
endsnippet

snippet "is[_ ]nil" "Kernel.is_nil/1" r
is_nil(${1:term})$0
endsnippet

snippet "[kK]ernel[\\. ]match\?" "Kernel.match?/2" r
${1:Kernel.}match?(${2:${3:pattern}, }${4:expr})$0
endsnippet

context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet range "Kernel...///3 first..last//step" i
`!p autojump_if_blank(snip, [3])
`${1:first}..${2:last}${3://${4:step}}$0
endsnippet

snippet "sigil[_ ]c" "Kernel.sigil_c/2(term, modifiers)" r
~c(${1:chars})$0
endsnippet

snippet "sigil[_ ]D" "Kernel.sigil_D/2(date_string, modifiers)" r
~D[${1:`date +%Y-%m-%d`}]$0
endsnippet

snippet "sigil[_ ]N" "Kernel.sigil_N/2(naive_datetime_string, modifiers)" r
~N[${1:`date "+%Y-%m-%d %T"`}]$0
endsnippet

# https://hexdocs.pm/elixir/1.12/Regex.html#module-modifiers
snippet "sigil[_ ]r" "Kernel.sigil_r/2(term, modifiers)" r
~r/${2:regex}/${1|f,i,m,s,u,x,U|}$0
endsnippet

snippet "sigil[_ ]s" "Kernel.sigil_s/2(term, modifiers)" r
~s(${1:string})$0
endsnippet

snippet "sigil[_ ]T" "Kernel.sigil_T/2(time_string, modifiers)" r
~T[${1:`date +%T`}]$0
endsnippet

# https://hexdocs.pm/elixir/1.12/Kernel.html#sigil_w/2
snippet "sigil[_ ]w" "Kernel.sigil_w/2(term, modifiers)" r
~w(${2:words})${1|s,a,c|}$0
endsnippet

context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet use "Kernel.use/2" b
`!p autojump_if_blank(snip, [2])
`use ${1:Module}${2:, ${3:key}: ${4:value}}$0
endsnippet

# REF path variable: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt#L894
snippet "\buse (phx|phoenix)" "Kernel.use/2 with a Phoenix module" r
use ${1:`!p snip.rv = root_module_name(path)`}, :${2|channel,component,controller,live_component,live_view,router,view|}$0
endsnippet
