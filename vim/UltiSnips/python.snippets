global !p

# ~/.vim/pythonx/vim_pythonx_helpers.py
from vim_pythonx_helpers import (
    autojump_if_blank,
    make_context,
    make_jumper
)

# ~/.vim/pythonx/global_helpers.py
from global_helpers import (
    closing_character
)

# ~/.vim/pythonx/python_helpers.py
from python_helpers import (
    class_name
)

def comprehension_opening(match):
    match match.group(1):
        case "list":
            return "["
        case "generator":
            return "("
        case _:
            return "{"

def decorator_tag(match):
    return "classmethod" if "class" in match.group(1) else "staticmethod"

def initialize_args(snip, init_tabstop_index, starting_tabstop_index):
    if (
        not snip.tabstop == 0 and
        not (args_tabstop := snip.tabstops[init_tabstop_index])
    ):
        return

    # Strip out all the surrounding tabstop characters
    args_list = (
        args_tabstop
        .current_text
        .removeprefix("def __init__(self")
        .removesuffix("):")
        .split(",")
    )

    args = [string.strip() for string in args_list if string]
    tabstop_indexes = range(
        starting_tabstop_index,
        starting_tabstop_index + len(args)
    )

    output = ""
    for arg, index in zip(args, tabstop_indexes, strict=True):
        output += f"\n    self.{arg} = ${{{index}:{arg}}}"

    snip.expand_anon(output)

endglobal

# NOTE: snip.tabstops[7] cannot be used here due to it being nested within
# snip.tabstops[6]. So, we have to take the outer tabstop.
context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop); initialize_args(snip, 6, 8)"
snippet class "Python class" b
`!p autojump_if_blank(snip, [2, 4, 6])
`class ${1:`!p snip.rv = class_name(snip)`}${2:(${3:object})}:
    ${4:"""
    ${5:TODO: Docstring for $1.}
    """

    }${6:def __init__(self$7):}$0
endsnippet

# REF for multiple negative lookbehinds of differing lengths:
# https://stackoverflow.com/a/40617321/567863
snippet "\b(?<!dictionary )(?<!generator )(?<!list )(?<!set )comprehension" "choice of comprehension type" r
${1|list comprehension,dictionary comprehension,set comprehension,generator comprehension|}$0
endsnippet

snippet def "decide what kind of function or method to create" b
def ${1|function,instance method,class method,static method|}$0
endsnippet

context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet "def function" "function" b
`!p autojump_if_blank(snip, [3])
`def ${1:name}(${2:args}):
    ${3:"""
    ${4:TODO: Docstring for $1.}
    """
    }$0
endsnippet

context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet "\bdef instance(?: method)?" "instance method" r
`!p autojump_if_blank(snip, [4])
`def ${1:name}(self${2:, ${3:args}}):
    ${4:"""
    ${5:TODO: Docstring for $1.}
    """
    }$0
endsnippet

context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet "\bdef (class(?: method)?)" "class method" r
`!p autojump_if_blank(snip, [4])
`@`!p snip.rv = decorator_tag(match)`
def ${1:name}(cls${2:, ${3:args}}):
    ${4:"""
    ${5:TODO: Docstring for $1.}
    """
    }$0
endsnippet

context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet "\bdef (static(?: method)?)" "static method" r
`!p autojump_if_blank(snip, [3])
`@`!p snip.rv = decorator_tag(match)`
def ${1:name}(${2:args}):
    ${3:"""
    ${4:TODO: Docstring for $1.}
    """
    }$0
endsnippet

snippet false "False" w
False$0
endsnippet

context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet from "Python import from statement" b
`!p autojump_if_blank(snip, [2, 4])
`from ${1:module} import ${2:(
    }${3:function}${4: as ${5:alias}}$0
`!p snip.rv = closing_character(t[2].strip())`
endsnippet

context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet import "Python single import statement" b
`!p autojump_if_blank(snip, [2])
`import ${1:module}${2: as ${3:alias}}$0
endsnippet

snippet lambda "Lambda expression" w
lambda ${1:params}: $2$0
endsnippet

context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet "\b(list|dictionary|set|generator) comprehension" "comprehension" r
`!p autojump_if_blank(snip, [6])
`${1:`!p snip.rv = comprehension_opening(match)`}${5:expression} for ${4:item} in ${2:iterable}$3${6: if ${7:condition}}`!p snip.rv = closing_character(t[1])`$0
endsnippet

context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet "\bmod(ulo)?" "% modulo" r
`!p autojump_if_blank(snip, [2])
`% ${1:number}${2: == ${3:0}}$0
endsnippet

snippet none "None" w
None$0
endsnippet

snippet return "return statement" b
return ${1:value}$0
endsnippet

context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet string "Literal string with fstring option" w
`!p autojump_if_blank(snip, [1])
`${1:f}"$2"$0
endsnippet

snippet true "True" w
True$0
endsnippet

snippet "\b(ternary|conditional)" "Conditional expression (ternary)" r
${2:True} if ${1:condition} else ${3:False}$0
endsnippet

snippet tuple "literal tuple" i
(${1:first}, ${2:second}$3)$0
endsnippet

context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet yield "yield statement" b
`!p autojump_if_blank(snip, [1])
`yield ${1:from }${2:expression}$0
endsnippet
