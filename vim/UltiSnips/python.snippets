global !p

# ~/.vim/pythonx/global_helpers.py
from global_helpers import (
    closing_character,
    maybe_comma
)

# ~/.vim/pythonx/python_helpers.py
from python_helpers import (
    class_name
)

def comprehension_opening(match):
    match match.group(1):
        case "list":
            return "["
        case "generator":
            return "("
        case _:
            return "{"

def decorator_tag(match):
    return "classmethod" if "class" in match.group(1) else "staticmethod"

def initialize_args(snip, init_tabstop_index, starting_tabstop_index):
    if not (args_tabstop := snip.tabstops[init_tabstop_index]):
        return

    # Strip out all the surrounding tabstop characters
    args_list = (
        args_tabstop
        .current_text
        .removeprefix("def __init__(self")
        .removesuffix("):")
        .split(",")
    )

    args = [string.strip() for string in args_list if string]
    tabstop_indexes = range(
        starting_tabstop_index,
        len(args) + starting_tabstop_index
    )

    output = ""
    for arg, index in zip(args, tabstop_indexes):
        output += "\n    self." + arg + " = ${" +  str(index) + ":" + arg + "}"

    snip.expand_anon(output)

def maybe_cls(match):
    return "cls" if "class" in match.group(1) else ""

def maybe_self(match):
    return "self" if "instance" in match.group(1) else ""

endglobal

# NOTE: snip.tabstops[7] cannot be used here due to it being nested within
# snip.tabstops[6]. So, we have to take the outer tabstop.
post_jump "if snip.tabstop == 0: initialize_args(snip, 6, 8)"
snippet class "Python class" b
class ${1:`!p snip.rv = class_name(snip)`}${2:(${3:object})}:
    ${4:"""
    ${5:TODO: Docstring for $1.}
    """

    }${6:def __init__(self$7):}$0
endsnippet

# REF for multiple negative lookbehinds of differing lengths: https://stackoverflow.com/a/40617321/567863
snippet "\b(?<!dictionary )(?<!generator )(?<!list )(?<!set )comprehension" "choice of comprehension type" r
${1|list comprehension,dictionary comprehension,set comprehension,generator comprehension|}$0
endsnippet

snippet def "decide what kind of function or method to create" b
def ${1|function,instance method,class method,static method|}$0
endsnippet

snippet "\bdef (function|instance(?: method)?)" "function or instance method" r
def ${1:name}(${2:`!p snip.rv = maybe_self(match)`}`!p snip.rv = maybe_comma(t[2], t[3])`${3:args}):
    ${4:"""
    ${5:TODO: Docstring for $1.}
    """
    }$0
endsnippet

snippet "\bdef (class(?: method)?|static(?: method)?)" "class or static method" r
@`!p snip.rv = decorator_tag(match)`
def ${1:name}(${2:`!p snip.rv = maybe_cls(match)`}`!p snip.rv = maybe_comma(t[2], t[3])`${3:args}):
    ${4:"""
    ${5:TODO: Docstring for $1.}
    """
    }$0
endsnippet

snippet "else if" "else if condition" b
elif ${1:condition}:
    ${2:${VISUAL:# do something}}$0
endsnippet

snippet false "False" w
False$0
endsnippet

snippet for "for statement" b
for ${2:element} in ${1:iterable}:
    ${3:${VISUAL:# do something}}${4:
else:
    ${5:# nothing found in $1}}$0
endsnippet

snippet from "Python import from statement" b
from ${1:module} import ${2:(
    }${3:function}${4: as ${5:alias}}$0
`!p snip.rv = closing_character(t[2].strip())`
endsnippet

snippet if "if statement" b
if ${1:condition}:
    ${2:${VISUAL:# do something}}${3:
else:
    ${4:# do something else}}$0
endsnippet

snippet import "Python single import statement" b
import ${1:module}${2: as ${3:alias}}$0
endsnippet

snippet lambda "Lambda expression" w
lambda ${1:params}: $2$0
endsnippet

snippet "\b(list|dictionary|set|generator) comprehension" "comprehension" r
${1:`!p snip.rv = comprehension_opening(match)`}${5:expression} for ${4:item} in ${2:iterable}$3${6: if ${7:condition}}`!p snip.rv = closing_character(t[1])`$0
endsnippet

snippet "\bmod(ulo)?" "% modulo" r
% ${1:number}${2: == ${3:0}}$0
endsnippet

snippet none "None" w
None$0
endsnippet

snippet return "return statement" b
return ${1:value}$0
endsnippet

snippet string "Literal string with fstring option" w
${1:f}"$2"$0
endsnippet

snippet true "True" w
True$0
endsnippet

snippet "\b(ternary|conditional)" "Conditional expression (ternary)" r
${2:True} if ${1:condition} else ${3:False}$0
endsnippet

snippet yield "yield statement" b
yield ${1:from }${2:expression}$0
endsnippet
