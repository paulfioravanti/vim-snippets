global !p

# ~/.vim/pythonx/global_helpers.py
from global_helpers import (
    closing_character,
    maybe_comma
)

def initialize_args(tabstop, snip):
    if not tabstop:
        snip.rv = ""
        return

    args = [string.strip() for string in tabstop.split(",") if string]
    snip.shift(2)
    for arg in args:
        snip += snip.mkline("", indent="")
        snip.rv += f"self.{arg} = {arg}"

endglobal

snippet class "Python class" b
class ${1:ClassName}${2:(${3:object})}:
    ${4:"""
    ${5:TODO: Docstring for $1.}
    """

    }${6:def __init__(self$7):`!p initialize_args(t[7], snip)`}$0
endsnippet

snippet def "module or instance method" b
def ${1:method_name}(${2:self}`!p snip.rv = maybe_comma(t[2], t[3])`${3:args}):
    ${4:"""
    ${5:TODO: Docstring for $1.}
    """
    }$0
endsnippet

snippet "def (class|static)" "class or static method" rb
`!p
method_type = match.group(1)
maybe_first_arg = "cls" if method_type == "class" else ""
`@`!p snip.rv = method_type`method
def ${1:method_name}(${2:`!p snip.rv = maybe_first_arg`}`!p snip.rv = maybe_comma(t[2], t[3])`${3:args}):
    ${4:"""
    ${5:TODO: Docstring for $1.}
    """
    }$0
endsnippet

snippet "else if" "else if condition" b
elif ${1:condition}:
    ${2:${VISUAL:# do something}}$0
endsnippet

snippet false "False" w
False$0
endsnippet

snippet for "for statement" b
for ${1:element} in ${2:list}:
    ${4:${VISUAL:# do something}}${3:
else:
    ${5:# nothing found in $2}}$0
endsnippet

snippet from "Python import from statement" b
from ${1:module} import ${2:(
    }${3:function}${4: as ${5:alias}}$0
`!p snip.rv = closing_character(t[2].strip())`
endsnippet

snippet if "if statement" b
if ${1:condition}:
    ${2:${VISUAL:# do something}}${3:
else:
    ${4:# do something else}}$0
endsnippet

snippet import "Python single import statement" b
import ${1:module}${2: as ${3:alias}}$0
endsnippet

snippet lambda "Lambda expression" w
lambda ${1:params}: $2$0
endsnippet

snippet mod "% modulo" w
% ${1:number}${2: == ${3:0}}$0
endsnippet

snippet none "None" w
None$0
endsnippet

snippet true "True" w
True$0
endsnippet

snippet "(conditional|ternary)" "Conditional expression (ternary)" rw
${2:True} if ${1:condition} else ${3:False}$0
endsnippet

snippet yield "yield statement" b
yield ${1:from }${2:expression}$0
endsnippet
