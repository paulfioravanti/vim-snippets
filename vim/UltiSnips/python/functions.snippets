global !p

# ~/.vim/pythonx/vim_pythonx_helpers.py
from vim_pythonx_helpers import (
    autojump_if_blank,
    make_context,
    make_jumper
)

from .functions import (
    decorator_tag
)

endglobal

snippet def "decide what kind of function or method to create" b
def ${1|function,instance method,class method,static method|}$0
endsnippet

context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet "def function" "function" b
`!p autojump_if_blank(snip, [3])
`def ${1:name}(${2:args}):
    ${3:"""
    ${4:TODO: Docstring for $1.}
    """
    }$0
endsnippet

context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet "\bdef instance(?: method)?" "instance method" r
`!p autojump_if_blank(snip, [4])
`def ${1:name}(self${2:, ${3:args}}):
    ${4:"""
    ${5:TODO: Docstring for $1.}
    """
    }$0
endsnippet

context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet "\bdef (class(?: method)?)" "class method" r
`!p autojump_if_blank(snip, [4])
`@`!p snip.rv = decorator_tag(match)`
def ${1:name}(cls${2:, ${3:args}}):
    ${4:"""
    ${5:TODO: Docstring for $1.}
    """
    }$0
endsnippet

context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet "\bdef (static(?: method)?)" "static method" r
`!p autojump_if_blank(snip, [3])
`@`!p snip.rv = decorator_tag(match)`
def ${1:name}(${2:args}):
    ${3:"""
    ${4:TODO: Docstring for $1.}
    """
    }$0
endsnippet
