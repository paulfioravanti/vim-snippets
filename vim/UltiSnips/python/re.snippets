global !p

# ~/.vim/pythonx/vim_pythonx_helpers.py
from vim_pythonx_helpers import (
    autojump_if_blank,
    make_context,
    make_jumper
)

endglobal

snippet .group "Match.group([group1, ...])" i
.group(${1:group1}$2)$0
endsnippet

context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet "(?<!re)\.match" "Pattern.match(string[, pos[, endpos]])" r
`!p autojump_if_blank(snip, [2, 3, 5])
`.match(${1:${VISUAL:string}}${2:${3:, ${4:pos}}${5:, ${6:endpos}}})$0
endsnippet

context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet "(pattern|regex)" "literal regex" r
`!p autojump_if_blank(snip, [1, 3])
`r"${1:^}${2:pattern}${3:$}"$0
endsnippet

context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet re.compile "re.compile(pattern, flags=0)" i
`!p autojump_if_blank(snip, [2])
`re.compile(${1:${VISUAL:pattern}}${2:, flags=${3:0}})$0
endsnippet

snippet "re.ignore case" "re.IGNORECASE" i
re.IGNORECASE$0
endsnippet

context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet re.match "re.match(pattern, string, flags=0)" i
`!p autojump_if_blank(snip, [3])
`re.match(${1:${VISUAL:pattern}}, ${2:string}${3:, flags=${4:0}})$0
endsnippet

context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet re.sub "re.sub(pattern, repl, string, count=0, flags=0)" i
`!p autojump_if_blank(snip, [4, 5, 7])
`re.sub(${1:${VISUAL:pattern}}, ${2:repl}, ${3:string}${4:${5:, count=${6:0}}${7:, flags=${8:0}}})$0
endsnippet
