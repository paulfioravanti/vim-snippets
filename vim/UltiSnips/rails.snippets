extends ruby

global !p

def controller_class_name(snip):
    return snip.basename.replace("_", " ").title().replace(" ", "")

def controller_model_default(controller_variable):
    return controller_variable.replace("_", " ").title().replace(" ", "")

def controller_plural_variable(snip):
    return snip.basename.replace("_controller", "")

def controller_singular_variable(snip):
    basename = snip.basename
    if basename.endswith("s_controller"):
        return basename.replace("s_controller", "")

    # Plural does not end in "s", and we do not have a plural/singular
    # dictionary to work with, so just return the plural name and correct it
    # within the snippet inline.
    return controller_plural_variable(snip)

def params_id(variable, snip):
    if variable == controller_singular_variable(snip):
        return "id"

    return variable + "_id"

endglobal

snippet "before action" "Rails before_action callback"
before_action :${0:method}
endsnippet

snippet "broadcasts to" "turbo-rails broadcasts_to method"
broadcasts_to :${1:stream}${2:, inserts_by: ${3::append}${4:, target: ${5:broadcast_target_default}}}$0
endsnippet

snippet "controller class" "Create controller class"
class `!p snip.rv = controller_class_name(snip)` < ApplicationController
  before_action :set_${1:`!p snip.rv = controller_singular_variable(snip)`}

  $0

  private

  def set_$1
    @$1 = ${2:`!p snip.rv = controller_model_default(t[1])`}.find(params[:${3:`!p snip.rv = params_id(t[1], snip)`}])
  end

  def $1_params
    params.require(:$1).permit(:${4:param})
  end
end
endsnippet

snippet "has many" "Rails has_many"
has_many :${1:object}s${2:, ${3:class_name: "${4:$1}"}${5:, foreign_key: "${6:reference}_id"}}$0
endsnippet

snippet "has rich text" "Rails has_rich_text"
has_rich_text :${1:object}${2:, encrypted: ${3:false}}$0
endsnippet

snippet "model class" "Create model class"
class `!p snip.rv = controller_class_name(snip)` < ApplicationRecord
  $0
end
endsnippet

snippet "redirect action" "Rails redirect_to action"
redirect_to action: "${1:action}"${2:, id: ${3:id}}$0
endsnippet

snippet "redirect controller" "Rails redirect_to controller"
redirect_to controller: "${1:controller}"${2:, action: "${3:instance}"${4:, id: ${5:id}}}$0
endsnippet

snippet "redirect instance" "Rails redirect_to instance"
redirect_to @${0:`!p snip.rv = controller_singular_variable(snip)`}
endsnippet

snippet "redirect instance url" "Rails redirect_to named url of instance"
redirect_to ${1:`!p snip.rv = controller_singular_variable(snip)`}_url(@${2:$1})$0
endsnippet

snippet "redirect plural url" "Rails redirect_to named url"
redirect_to ${1:`!p snip.rv = controller_plural_variable(snip)`}_url$0
endsnippet

snippet "validates presence of" "validates_presence_of"
validates_presence_of :${1:attribute}${2:, on: :${3:create}, message: "${4:can't be blank}"}$0
endsnippet
