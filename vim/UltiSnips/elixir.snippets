# Template-related snippets needed for inline heex templates
extends html
extends eelixir

global !p

# ~/.vim/pythonx/vim_pythonx_helpers.py
from vim_pythonx_helpers import (
    autojump_if_blank,
    make_context,
    make_jumper
)

# ~/.vim/pythonx/global_helpers.py
from global_helpers import (
    closing_character,
    key_closing
)

def struct_name(match):
    capture = match.group(1)
    return capture.lstrip().title() if capture else "Struct"

def tuple_tag(match):
    tag = match.group(1)
    return "ok" if tag == "okay" else tag

endglobal

snippet comment "Elixir comment" w
# ${1:${VISUAL}}$0
endsnippet

snippet "(?<![eE]num[\\. ])(?<![mM]ap[\\. ])(?<![sS]tream[\\. ])(?<![kK]eyword[\\. ])filter" "(Enum|Map|Stream|Keyword).filter/2 chooser" r
${1|Enum,Map,Stream,Keyword|}.filter$0
endsnippet

snippet "(?<![iI][oO][\\. ])(?<![kK]ernel[\\. ])(?<![iI]nspect[\\. ])inspect" "(IO|Kernel|Inspect).inspect/(2|3) chooser" r
${1|Kernel,IO,Inspect|}.inspect$0
endsnippet

snippet "key[- ]value" "Key-value pair" r
${1:"}${2:key}`!p snip.rv = key_closing(t[1])` ${3:$2}${4:,}$0
endsnippet

snippet "(keyword|opts)" "Literal Elixir keyword list" r
${1:[}${2:key}: ${3:value}$4`!p snip.rv = closing_character(t[1])`$0
endsnippet

snippet "line length" "Elixir formatter line_length parameter" w
line_length: ${1:80}$0
endsnippet

snippet "list generator" "List generator used in for comprehensions" i
${1:element} <- ${2:[${3:list}]}$0
endsnippet

snippet "list prepend" "prepend to literal Elixir list" i
[${1:element} | ${2:list}]$0
endsnippet

context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet "(?<!is[_ ])(?<!is[_ ]non[_ ]struct[_ ])(?<!struct )map" "Literal Elixir map" r
`!p autojump_if_blank(snip, [1])
`%{${1:"}${2:key}`!p snip.rv = key_closing(t[1])` ${3:$2}$4}$0
endsnippet

snippet segment "Bitstring segment" i
${1:name}::${2:type}$0
endsnippet

snippet "(?<![kK]ernel[\\. ])(?<!literal )struct" "Kernel.struct(!)/2 or literal struct chooser" r
${1|Kernel.struct/2,literal struct|}$0
endsnippet

context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet "literal struct( .+)?" "Elixir struct" r
`!p autojump_if_blank(snip, [2])
`%${1:`!p snip.rv = struct_name(match)`}{${2:${3:field}: ${4:$3}}}$0
endsnippet

snippet "(?<!exit shutdown )(?<!is[_ ])tuple" "literal tuple" r
{${1:first}, ${2:second}$3}$0
endsnippet

snippet "tuple(?![_ ]size) (.+)" "literal tagged tuple" r
{:`!p snip.rv = tuple_tag(match)`, ${1:value}}$0
endsnippet
