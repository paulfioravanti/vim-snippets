# Template-related snippets needed for inline heex templates
extends html
extends eelixir

global !p

# ~/.vim/pythonx/global_helpers.py
from global_helpers import (
    closing_character,
    key_closing
)

endglobal

snippet "bitstring generator" "Bitstring generator used in for comprehensions" i
<<${1:char} <- ${2:"${3:binary}"}>>$0
endsnippet

snippet comment "Elixir comment" w
# ${1:${VISUAL}}$0
endsnippet

snippet filter "(Enum|Keyword|Map|Stream).filter/2" w
${1|Enum,Map,Stream,Keyword|}.filter(${2:${3:enumerable}, }${4:fun})$0
endsnippet

snippet "(?:IO )?inspect" "IO.inspect/2" r
IO.inspect(${1:item}${2:, ${3:opts}})$0
endsnippet

snippet key-value "Key-value pair" i
${1:"}${2:key}`!p snip.rv = key_closing(t[1])` ${3:$2}${4:,}$0
endsnippet

snippet keyword "Literal Elixir keyword list" i
${1:[}${2:key}: ${3:value}$4`!p snip.rv = closing_character(t[1])`$0
endsnippet

snippet "line length" "Elixir formatter line_length parameter" w
line_length: ${0:80}
endsnippet

snippet "list prepend" "prepend to literal Elixir list" i
[${1:element} | ${2:list}]$0
endsnippet

snippet map "Literal Elixir map" i
%{${1:"}${2:key}`!p snip.rv = key_closing(t[1])` ${3:$2}$4}$0
endsnippet

snippet "list generator" "List generator used in for comprehensions" i
${1:element} <- ${2:[${3:list}]}$0
endsnippet

snippet "n get text(?: 3)?" "Gettext.Backend.ngettext/3" r
ngettext("${1:msgid}", "${2:msgid_plural}", ${3:n})$0
endsnippet

snippet "(?:enum )?random" "Enum.random/1" r
Enum.random(${1:enumerable})$0
endsnippet

snippet segment "Bitstring segment" i
${1:name}::${2:type}$0
endsnippet

snippet "struct( .+)?" "Elixir struct" r
`!p
capture = match.group(1)
name = capture.lstrip().title() if capture else "Struct"
`%${1:`!p snip.rv = name`}{${2:${3:field}: ${4:$3}}}$0
endsnippet

snippet tuple "literal tuple" i
{${1:first}, ${2:second}$3}$0
endsnippet

snippet "tuple (.+)" "tagged tuple" r
`!p
tag = match.group(1)
tag = "ok" if tag == "okay" else tag
`{:`!p snip.rv = tag`, ${1:value}}$0
endsnippet
