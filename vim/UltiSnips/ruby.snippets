global !p

# ~/.vim/pythonx/global_helpers.py
from global_helpers import (
    key_closing,
    maybe,
    maybe_comma,
    maybe_surround,
    key_closing,
)

# ~/.vim/pythonx/ruby_helpers.py
from ruby_helpers import (
    class_name
)

_PERCENT_LITERALS = {
    "string": "w",
    "word": "w",
    "symbol": "i"
}

def initialize_args(tabstop, snip):
    if not tabstop:
        snip.rv = ""
        return

    args = [string.strip() for string in tabstop.split(",") if string]
    snip.shift(2)
    for arg in args:
        snip += snip.mkline("", indent="")
        snip.rv += f"@{arg} = {arg}"

def initialize_attr_args(tabstop):
    if not tabstop:
        return ""

    args = [string.strip() for string in tabstop.split(",") if string]
    attrs = map(lambda arg: f":{arg}", args)
    return " " + ", ".join(attrs)

def percent_literal(match):
    capture = match.group(1)
    if capture:
        return _PERCENT_LITERALS.get(capture, "")
    return ""

def words_to_constant(match):
    capture = match.group(1)
    if not capture:
        return "CONSTANT_NAME"

    word_list = capture.upper().split()
    return "_".join(word_list)

endglobal

snippet "(string|symbol|word) (?:(array|list))" "string/symbol array list literals" ri
%`!p snip.rv = percent_literal(match)`[$1]$0
endsnippet

snippet case "case statement" b
case ${1:expression}
when ${2:match}
  ${3:${VISUAL:# do something}}
when ${4:match}
  ${5:# do something else}
else
  ${6:# no match}
end$0
endsnippet

snippet class "class declaration" b
class ${1:`!p snip.rv = class_name(snip)`}${2: < ${3:SuperClass}}${4:
  ${5:${7:attr_${8|reader,writer,accessor|}`!p snip.rv = initialize_attr_args(t[6])`$9

  }def initialize($6)`!p initialize_args(t[6], snip)`
  end}$0
end}`!p snip.rv = maybe(t[4], "; end")`
endsnippet

snippet def "Ruby method definition" b
${1:private${2:_class_method} }def ${3:self.}${4:method_name}${5:(${6:*args})}${7:
  $8
end}`!p snip.rv = maybe(t[7], " = ")`$0
endsnippet

snippet "else if" "else if condition" b
elsif ${1:condition}
  ${2:${VISUAL:# do something}}$0
endsnippet

snippet "frozen( string( literal)?)?" "frozen string literal pragma" br
# frozen_string_literal: true$0
endsnippet

snippet hash "Literal Ruby hash" i
{ ${1:"}${2:key}`!p snip.rv = key_closing(t[1])` ${3:$2}$4 }$0
endsnippet

snippet "^(?!else)\b(if|unless)" "(if|unless) statements" rb
`!p snip.rv = match.group(1)` ${1:condition}
  ${2:${VISUAL:# do something}}${3:
else
  ${4:# do something else}}
end$0
endsnippet

snippet initialize "def initialize ..." b
def initialize(${1:*args})
  $0
end
endsnippet

snippet interpolate "string interpolation" i
#{${1:attribute}}$0
endsnippet

snippet key-value "Key-value pair" i
${1:"}${2:key}`!p snip.rv = key_closing(t[1])` ${3:$2}${4:,}$0
endsnippet

snippet module "module declaration" b
module ${1:`!p snip.rv = class_name(snip)`}
  $0
end
endsnippet

snippet "module function" "module_function statement" b
module_function$0
endsnippet

snippet "private constant( .+)?" "private_constant statement" br
private_constant :${1:`!p snip.rv = words_to_constant(match)`}$0
endsnippet

snippet range "range literal" i
${1:start}${2|..,...|}${3:end}$0
endsnippet

snippet struct "Struct.new" i
Struct.new("${1:ClassName}"`!p snip.rv = maybe_comma(t[1], t[2])`${2:*member_names})${3:`!p snip.rv = maybe_surround(t[4], "<<")`${4|inline block,do block|}`!p snip.rv = maybe_surround(t[4], ">>")`}$0
endsnippet

snippet symbol "ruby symbol" i
:${1:symbol}$0
endsnippet

snippet ternary "ternary (?:) statement" i
${1:condition} ? ${2:true} : ${3:false}$0
endsnippet

snippet when "when clause for case statement" b
when ${1:match}
  ${2:${VISUAL:# do something}}$0
endsnippet

snippet while "while <expression> ... end"
while ${1:expression}
  $0
end
endsnippet
