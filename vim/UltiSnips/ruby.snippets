global !p

def class_name(snip):
    return snip.basename.replace("_", " ").title().replace(" ", "")

endglobal

snippet and "&& operator" i
&&$0
endsnippet

snippet case "case statement"
case ${1:expression}
when ${2:match}
  ${3:${VISUAL:# do something}}
when ${4:match}
  ${5:# do something else}
else
  ${6:# no match}
end$0
endsnippet

snippet "(class|module)" "class or module declaration" br
`!p snip.rv = match.group(1)` ${1:`!p snip.rv = class_name(snip)`}
  $0
end
endsnippet

snippet def "Ruby method definition"
${1:private${2:_class_method} }def ${3:self.}${4:method_name}${5:(${6:*args})}
  $0
end
endsnippet

snippet "else if" "else if condition"
elsif ${1:condition}
  ${2:${VISUAL:# do something}}$0
endsnippet

snippet "\.end(s)? with" ".end_with? method" ri
.end_with?("${1:string}")$0
endsnippet

snippet "frozen( string( literal)?)?" "frozen string literal pragma" br
# frozen_string_literal: true$0
endsnippet

snippet "\b(if|unless)" "(if|unless) statements" r
`!p snip.rv = match.group(1)` ${1:condition}
  ${2:${VISUAL:# do something}}${3:
else
  ${4:# do something else}}
end$0
endsnippet

snippet .map ".map" i
.map${1|inline block,do block,explicit block,local proc,local method,external method|}$0
endsnippet

snippet "module function" "module_function statement" b
module_function$0
endsnippet

snippet "not (equal|=)" "!= operator" i
!=$0
endsnippet

snippet when "when clause for case statement" b
when ${1:match}
  ${2:${VISUAL:# do something}}$0
endsnippet
