priority -1

global !p

import re
from UltiSnips import vim_helper

_HTML_KEYWORDS = [
    "article",
    "audio",
    "body",
    "button",
    "code",
    "div",
    "em",
    "figcaption",
    "figure",
    "footer",
    "form",
    "h[1-6]",
    "head",
    "html",
    "kbd",
    "li",
    "main",
    "nav",
    "ol",
    "ordered list",
    "p(?:re)?",
    "rt",
    "ruby",
    "samp",
    "section",
    "select",
    "span",
    "strong",
    "style",
    "table",
    "tbody",
    "td",
    "textarea",
    "tfoot",
    "th",
    "title",
    "tr",
    "ul",
    "unordered list",
    "var",
    "video"
]
HTML_KEYWORD = re.compile(rf"\b({'|'.join(_HTML_KEYWORDS)})\b")

_IDS = re.compile(r"(?<=#)[^\.#]+") # #some-id
_CLASSES = re.compile(r"(?<=\.)[^\.#]+") # .some-class
_MULTILINE = "multi-line"

# Bridging list of English words/phrases to HTML tag names
TAG_NAME_MAPPINGS = {
    "figure caption": "figcaption",
    "heading 1": "h1",
    "heading 2": "h2",
    "heading 3": "h3",
    "heading 4": "h4",
    "heading 5": "h5",
    "heading 6": "h6",
    "keyboard": "kbd",
    "list item": "li",
    "ordered list": "ol",
    "ruby text": "rt",
    "sample": "samp",
    "table data": "td",
    "table footer": "tfoot",
    "table head": "thead",
    "table row": "tr",
    "text area": "textarea",
    "unordered list": "ul"
}

def build_tag_with_attributes(snip, match):
    tag = text_to_tag(match)
    # NOTE: Although a tag with attributes probably doesn't need this wrapping
    # $1 tabstop, without it, the snippet spacing is borked.
    output = f"<{tag}${{1:"

    if (specified_attributes := tag_args(match)):
        ids = _attribute_text(_IDS, specified_attributes)
        classes = _attribute_text(_CLASSES, specified_attributes)

        if ids:
            output += f" id=\"{ids}\""

        if classes:
            output += f" {_class_attribute_name()}=\"{classes}\""
    else:
        output += "${2: id=\"${3:id}\"}"
        output += f"${{4: ${{5:{_class_attribute_name()}}}=\"${{6:classes}}\"}}"

    output += "}$7>"
    visual = "${8:${VISUAL}}"

    # tag type
    if match.group(3) == _MULTILINE:
        output += f"\n  {visual}\n"
    else:
        output += visual

    output += f"</{tag}>"
    snip.expand_anon(output)

def tag_args(match):
    return match.group(2) or ""

def text_to_tag(match):
    text = match.group(1)
    return TAG_NAME_MAPPINGS.get(text, text)

def _attribute_text(attribute_type, attributes):
    return " ".join(re.findall(attribute_type, attributes))

def _class_attribute_name():
    # This handling needed for React.
    # NOTE: snip.ft not available during pre_expand/post_jump, which is when
    # this function is used. See SnippetUtilForAction class in Ultisnips
    # codebase to show that it only responds to `expand_anon`:
    # https://github.com/SirVer/ultisnips/blob/master/pythonx/UltiSnips/text_objects/python_code.py
    return "className" if vim_helper.eval("&filetype") == "javascript" else "class"

endglobal

context "match.group(1) in TAG_NAME_MAPPINGS"
snippet "((?:\w+\s)?\w+)" "convert tag descriptions to tag names" r
`!p snip.rv = text_to_tag(match)`$0
endsnippet

context "re.match(HTML_KEYWORD, match.group(1))"
snippet "(\w+)([#\.][\w\-#\.]+)?" "HTML tag single-line or multi-line choice" r
`!p snip.rv = match.group(1) + tag_args(match)` ${1|multi-line,single-line|}$0
endsnippet

context "re.match(HTML_KEYWORD, match.group(1))"
post_jump "build_tag_with_attributes(snip, match)"
snippet "(\w+)([#\.][\w\-#\.]+)? ((multi|single)-line)" "HTML tag multi-line" r
$0
endsnippet

snippet iframe "HTML iframe tag" i
<iframe src="${1:src}">$0</iframe>
endsnippet

snippet img "HTML img tag" i
<img src="${1:src}"${2: alt="${3:alt}"} />$0
endsnippet

snippet input "HTML input tag of type 'text'" b
<input type="text"${1:${2: id="${3:id}"}${4: class="${5:class}"}${6: name="${7:name}"}${8: value="${9:value}"}} />$0
endsnippet

snippet "\binput (button|checkbox|color|datetime-local|email|file|hidden|month|password|radio|reset|search|submit|text|time|url|week)" "HTML input tag of (type) with id, class, name, value" r
`!p
input_type = match.group(1)
`<input type="`!p snip.rv = input_type`"${1:${2: id="${3:id}"}${4: class="${5:class}"}${6: name="${7:name}"}${8: value="${9:value}"}} />$0
endsnippet

snippet "\binput (date|number|range)" "HTML input tag of (type) with id, name, min, max" r
`!p
input_type = match.group(1)
`<input type="`!p snip.rv = input_type`"${1:${2: id="${3:id}"}${4: class="${5:class}"}${6: name="${7:name}"}${8: value="${9:value}"}${10: min="${11:min}"}${12: max="${13:max}"}} />$0
endsnippet

snippet "input tel" "HTML input tag of telephone number type" b
<input type="tel"${1:${2: id="${3:id}"}${4: class="${5:class}"}${6: name="${7:name}"}${8: value="${9:value}"}${10: pattern="${11:pattern}"}} />$0
endsnippet

snippet label "Inline label tag" i
<label ${1:for="${2:input-id}}>${3:${VISUAL}}</label>$0
endsnippet

snippet "(link|anchor|a tag)" "HTML <a> tag" r
<a href="${1:url}"${2: target="${3|_blank,_parent,_top|}"}>
  ${4:${VISUAL:text}}
</a>$0
endsnippet

snippet "(link|anchor) (mail|email)" "HTML <a> tag link to telephone number" r
<a href="mailto:${1:${VISUAL:address}}">${2:$1}</a>$0
endsnippet

snippet "(link|anchor) phone" "HTML <a> tag link to telephone number" r
<a href="tel:${1:${VISUAL:number}}">${2:$1}</a>$0
endsnippet

snippet method "<form> method attribute" i
method="${1|post,get|}"$0
endsnippet

snippet option "HTML option tag" i
<option value="${1:value}">${2:text}</option>$0
endsnippet

snippet source "HTML source tag" i
<source src="${1:url}" type="${2:type}" />$0
endsnippet

snippet target "<form> target attribute" i
target="${1|_blank,_parent,_top|}"$0
endsnippet
