priority -1

global !p

# ~/.vim/pythonx/html_helpers.py
from html_helpers import (
    can_map_to_tag_name,
    extract_classes,
    extract_ids,
    is_html_input_tag,
    is_html_min_max_input_tag,
    is_html_tag,
    text_to_tag
)

# ~/.vim/pythonx/html_helpers.py
from javascript_helpers import (
    class_attribute_name
)

_MULTILINE = "multi-line"

def build_tag_with_attributes(snip, match):
    tag, attributes, tag_type = match.group(1, 2, 3)
    tag = text_to_tag(tag)
    # NOTE: Although a tag with attributes probably doesn't need this wrapping
    # $1 tabstop, without it, the snippet spacing is borked, which seems like a
    # bug in UltiSnips.
    output = f"<{tag}${{1:"

    if attributes:
        ids = extract_ids(attributes)
        classes = extract_classes(attributes)

        if ids:
            output += f" id=\"{ids}\""

        if classes:
            output += f" {class_attribute_name()}=\"{classes}\""
    else:
        output += "${2: id=\"${3:id}\"}"
        output += f"${{4: ${{5:{class_attribute_name()}}}=\"${{6:classes}}\"}}"

    output += "}$7>"
    visual = "${8:${VISUAL}}"

    if tag_type == _MULTILINE:
        output += f"\n  {visual}\n"
    else:
        output += visual

    output += f"</{tag}>"
    snip.expand_anon(output)

def tag_args(match):
    return match.group(2) or ""

endglobal

context "can_map_to_tag_name(match.group(1))"
snippet "((?:\w+\s)?\w+)" "convert tag descriptions to tag names" r
`!p snip.rv = text_to_tag(match.group(1))`$0
endsnippet

context "is_html_tag(match.group(1))"
snippet "(\w+)([#\.][\w\-#\.]+)?" "HTML tag single-line or multi-line choice" r
`!p snip.rv = match.group(1) + tag_args(match)` ${1|multi-line,single-line|}$0
endsnippet

context "is_html_tag(match.group(1))"
post_jump "build_tag_with_attributes(snip, match)"
snippet "(\w+)([#\.][\w\-#\.]+)? ((multi|single)-line)" "HTML tag multi-line" r
$0
endsnippet

snippet iframe "HTML iframe tag" i
<iframe src="${1:src}">$0</iframe>
endsnippet

snippet img "HTML img tag" i
<img src="${1:src}"${2: alt="${3:alt}"} />$0
endsnippet

snippet input "HTML input tag of type 'text'" b
<input type="text"${1:${2: id="${3:id}"}${4: class="${5:class}"}${6: name="${7:name}"}${8: value="${9:value}"}} />$0
endsnippet

context "is_html_input_tag(match.group(1))"
snippet "\binput (\w+)" "HTML input tag of (type) with id, class, name, value" r
`!p
input_type = match.group(1)
`<input type="`!p snip.rv = input_type`"${1:${2: id="${3:id}"}${4: class="${5:class}"}${6: name="${7:name}"}${8: value="${9:value}"}} />$0
endsnippet

context "is_html_min_max_input_tag(match.group(1))"
snippet "\binput (\w+)" "HTML input tag of (type) with id, name, min, max" r
`!p
input_type = match.group(1)
`<input type="`!p snip.rv = input_type`"${1:${2: id="${3:id}"}${4: class="${5:class}"}${6: name="${7:name}"}${8: value="${9:value}"}${10: min="${11:min}"}${12: max="${13:max}"}} />$0
endsnippet

snippet "input tel" "HTML input tag of telephone number type" b
<input type="tel"${1:${2: id="${3:id}"}${4: class="${5:class}"}${6: name="${7:name}"}${8: value="${9:value}"}${10: pattern="${11:pattern}"}} />$0
endsnippet

snippet label "Inline label tag" i
<label ${1:for="${2:input-id}}>${3:${VISUAL}}</label>$0
endsnippet

snippet "(link|anchor|a tag)" "HTML <a> tag" r
<a href="${1:url}"${2: target="${3|_blank,_parent,_top|}"}>
  ${4:${VISUAL:text}}
</a>$0
endsnippet

snippet "(link|anchor) (mail|email)" "HTML <a> tag link to telephone number" r
<a href="mailto:${1:${VISUAL:address}}">${2:$1}</a>$0
endsnippet

snippet "(link|anchor) phone" "HTML <a> tag link to telephone number" r
<a href="tel:${1:${VISUAL:number}}">${2:$1}</a>$0
endsnippet

snippet method "<form> method attribute" i
method="${1|post,get|}"$0
endsnippet

snippet option "HTML option tag" i
<option value="${1:value}">${2:text}</option>$0
endsnippet

snippet source "HTML source tag" i
<source src="${1:url}" type="${2:type}" />$0
endsnippet

snippet target "<form> target attribute" i
target="${1|_blank,_parent,_top|}"$0
endsnippet
