global !p

# ~/.vim/pythonx/vim_pythonx_helpers.py
from vim_pythonx_helpers import (
    autojump_if_blank,
    make_context,
    make_jumper
)

# ~/.vim/pythonx/rails/controller.py
from rails.controller import (
    controller_class_resource_name,
    controller_file_resource_name,
    controller_model_default,
    controller_singular_variable,
    params_id
)

endglobal

snippet "before action" "Rails before_action callback"
before_action :${0:method}
endsnippet

snippet "controller class" "Create controller class" b
class ${1:`!p snip.rv = controller_class_resource_name(snip)`}Controller < ApplicationController
  before_action :set_${2:`!p snip.rv = controller_singular_variable(snip)`}

  $0

  private

  def set_$2
    @$2 = ${3:`!p snip.rv = controller_model_default(t[2])`}.find(params[:${4:`!p snip.rv = params_id(t[1], t[2], t[3])`}])
  end

  def $2_params
    params.require(:$2).permit(:${5:param})
  end
end
endsnippet

context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet "redirect action" "Rails redirect_to action" b
`!p autojump_if_blank(snip, [2])
`redirect_to action: "${1:action}"${2:, id: ${3:id}}$0
endsnippet

context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet "redirect controller" "Rails redirect_to controller" b
`!p autojump_if_blank(snip, [2, 4])
`redirect_to controller: "${1:controller}"${2:, action: "${3:instance}"${4:, id: ${5:id}}}$0
endsnippet

snippet "redirect instance" "Rails redirect_to instance" b
redirect_to @${0:`!p snip.rv = controller_singular_variable(snip)`}
endsnippet

snippet "redirect instance url" "Rails redirect_to named url of instance" b
redirect_to ${1:`!p snip.rv = controller_singular_variable(snip)`}_url(@${2:$1})$0
endsnippet

snippet "redirect plural url" "Rails redirect_to named url" b
redirect_to ${1:`!p snip.rv = controller_file_resource_name(snip)`}_url$0
endsnippet
