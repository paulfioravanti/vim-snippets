global !p

import re

# ~/.vim/pythonx/global_helpers.py
from global_helpers import (
    closing_character
)

# ~/.vim/pythonx/javascript_helpers.py
from javascript_helpers import (
    maybe_semi
)

_PROP_SPACES_KEEP_END_BRACKET = re.compile(r"\s(?![^{]*\})|(/?>$)")
_ON_PROP = re.compile(r"^on([A-Z]\w+)")

def format_tag(snip):
    parts = list(
        filter(None, re.split(_PROP_SPACES_KEEP_END_BRACKET, snip.v.text))
    )
    snip.rv += parts[0]
    for part in parts[1:-1]:
        snip += snip.mkline("", indent="  ")
        snip.rv += part
    snip += snip.mkline("", indent="")
    snip.rv += parts[-1]

def maybe_self_closing(tabstop):
    return "" if tabstop else " /"

def prop_value_placeholder(tabstop):
    if (match := _ON_PROP.match(tabstop)):
        return "handle" + match.group(1)
    else:
        return tabstop

def state_text_defaults(snip, tabstop):
    state_name = _uppercased(tabstop) or "State"
    set_state_text = f"set{state_name}"
    initial_state_text = snip.v.text or f"initial{state_name}"
    return (set_state_text, initial_state_text)

def _uppercased(tabstop):
    if not tabstop:
        return ""
    else:
        return tabstop[0].capitalize() + tabstop[1:]

endglobal

snippet "\b(?<!render )(?<!define function )(?<!define class )component" "render or define component" r
${1|render component,define function component,define class component|}$0
endsnippet

snippet "define component" "define component type" b
${1|define function component,define class component|}$0
endsnippet

snippet "define class component" "class component" b
class ${1:`!p snip.rv = snip.basename`} extends React.Component {
  render() {
    return (
      $2
    )`!p maybe_semi(snip)`$0
  }
}
endsnippet

snippet "define function component" "function component" b
${1:export ${2:default }}function ${3:`!p snip.rv = snip.basename`}(${4:props$5}) {
  return (
    $6
  )`!p maybe_semi(snip)`$0
}
endsnippet

context "snip.visual_text"
snippet format "format single line tag to multiline" w
`!p format_tag(snip)`$0
endsnippet

snippet fragment "React component to return multiple elements" b
<${1:React.Fragment}>
  ${2:${VISUAL}}$0
</$1>
endsnippet

snippet "\b((handle|on|set)[A-Z]\w+)" "user-defined (handle|on|set)Something methods" r
`!p snip.rv = match.group(1)`(${1:args})`!p maybe_semi(snip)`$0
endsnippet

snippet "import use state" "import useState from react" b
import { useState } from "react"`!p maybe_semi(snip)`$0
endsnippet

snippet prop "define a prop" i
${1:name}=${2:\{}${3:`!p snip.rv = prop_value_placeholder(t[1])`}`!p snip.rv = closing_character(t[2])`$0
endsnippet

snippet props "destructure props" w
{ ${1:prop} }$0
endsnippet

snippet render "render value" w
{${1:${VISUAL:value}}}$0
endsnippet

snippet "render component" "render user-defined component" i
<${1:ComponentName}${2: prop$3}`!p snip.rv = maybe_self_closing(t[4])`>${4:
  ${5:// children}
</$1>}$0
endsnippet

snippet "use state" "useState" b
`!p
(set_state_text, initial_state_text) = state_text_defaults(snip, t[1])
`const [${1:state}, ${2:`!p snip.rv = set_state_text`}] = useState(${3:`!p snip.rv = initial_state_text`})`!p maybe_semi(snip)`$0
endsnippet
