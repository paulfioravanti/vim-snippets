global !p

import re

# ~/.vim/pythonx/javascript_helpers.py
from javascript_helpers import (
    maybe_semi
)

_OPENING_CURLY = "{ "

def maybe_closing_import(tabstop):
    return " }" if re.match(rf"{_OPENING_CURLY}", tabstop) else ""

def import_module_text(tabstop):
    return "exported" if re.match(rf"{_OPENING_CURLY}", tabstop) else "exported or *"

def module_file_default_text(t1, t2):
    if t2 in ["exported", "exported or *", "*"]:
        return "module"
    elif t1:
        # NOTE: When the default text for t2 is deleted/changed, the tabstop
        # itself also seems to get deleted, and any replacement text is appended
        # to t1, hence this clause.
        file_text = t1.removeprefix(_OPENING_CURLY)
        return f"./{file_text}" if file_text else "module"
    else:
        # NOTE: This clause will catch when the opening curly is deleted.
        return f"./{t2}"

endglobal

snippet export "export declaration" b
export${1: default} ${2:expression}`!p maybe_semi(snip)`$0
endsnippet

snippet import "import from module" b
import ${1:\{ }${2:`!p snip.rv = import_module_text(t[1])`}${3: as ${4:alias}}`!p snip.rv = maybe_closing_import(t[1])`${5: from "${6:`!p snip.rv = module_file_default_text(t[1], t[2])`}"}`!p maybe_semi(snip)`$0
endsnippet
