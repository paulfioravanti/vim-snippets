global !p

# ~/.vim/pythonx/vim_pythonx_helpers.py
from vim_pythonx_helpers import (
    autojump_if_blank,
    make_context,
    make_jumper
)

# ~/.vim/pythonx/global_helpers.py
from global_helpers import (
    closing_character
)

# ~/.vim/pythonx/javascript_helpers.py
from javascript_helpers import (
    maybe_spaces
)

def words_to_function(words):
    head, *tail = words.split(" ")
    tail = [word.capitalize() for word in tail]
    return "".join([head, *tail])

endglobal

snippet Array "Array(elements/length) constructor" i
Array(${1:elements or length})$0
endsnippet

context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet "[Aa]rray[\. ]from\s?([Aa]sync)?" "Array.from/fromAsync(arrayLike, mapFn, thisArg)" r
`!p autojump_if_blank(snip, [2, 5])
``!p maybeAsync = "Async" if match.group(1) else ""
`Array.from`!p snip.rv = maybeAsync`(${1:${VISUAL:arrayLike}}${2:${3:, ${4:mapFn}}${5:, ${6:thisArg}}})$0
endsnippet

snippet "([Aa]rray\.)?is\s?[Aa]rray" "Array.isArray(value)" r
Array.isArray(${1:value})$0
endsnippet

context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet "[Aa]rray[\. ]of" "Array.of(element1, element2, ...)" r
`!p autojump_if_blank(snip, [1, 3])
`Array.of(${1:${2:element1}${3:, ${4:element2}}})$0
endsnippet

# NOTE: Negative look behinds needed for:
# - "ordered" due to conflicts with HTML "ordered list" (<ol>) tag trigger word
# - "is" for Array.isArray(value) snippet
context "snip.visual_text and make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet "(?<!ordered )(?<!is )(?<!is)(array|list|\[\])" "Literal array/list with potential spread" r
`!p autojump_if_blank(snip, [1])
`[${1:...}${2:${VISUAL}}$3]$0
endsnippet

snippet "(?<!ordered )(?<!is )(?<!is)(array|list|\[\])" "Literal array/list" r
[$1]$0
endsnippet

snippet .at "(Array|String).prototype.at(index)" i
.at(${1:index})$0
endsnippet

context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet "\.(concat|push|unshift)" "(Array|String).prototype.concat/push/unshift(value1, value2, ...)" r
`!p autojump_if_blank(snip, [1, 3])
`.`!p snip.rv = match.group(1)`(${1:${2:value1}${3:, ${4:value2}}})$0
endsnippet

context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet "\.copy\s?[Ww]ithin" "Array.prototype.copyWithin(target, start, end)" r
`!p autojump_if_blank(snip, [3])
`.copyWithin(${1:target}, ${2:start}${3:, ${4:end}})$0
endsnippet

snippet "(?<!Object)\.(entries|keys|values)" "Array.prototype.entries/keys/values()" r
.`!p snip.rv = match.group(1)`()$0
endsnippet

context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet "\.(every|filter|find(?:(\sl|L)ast)?(?:(\si|I)ndex)?|flat(?:(\sm|M)ap)|for(?:(\se|E)ach)|group(?:((\st|T)o)((\sm|M)ap))?|map|some)" "Array.prototype.every/filter/find/findIndex/findLast/findLastIndex/flatMap/forEach/group/groupToMap/map(callbackFn, thisArg)" r
`!p autojump_if_blank(snip, [1, 4, 6])
`.`!p snip.rv = words_to_function(match.group(1))`(${3:${4:(}${5:x}`!p snip.rv = closing_character(t[4])` => ${6:\{}$7`!p snip.rv = maybe_spaces(t[6]) + closing_character(t[6])`}${1:, ${2:thisArg}})$0
endsnippet

context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet .fill "Array.prototype.fill(value, start, end)" i
`!p autojump_if_blank(snip, [2, 4])
`.fill(${1:value}${2:, ${3:start}${4:, ${5:end}}})$0
endsnippet

snippet .flat "Array.prototype.flat(depth)" i
.flat(${1:depth})$0
endsnippet

context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet "\.(includes|(?:last)?(?:((?<!last)i|\si|I))ndex(?:(\so|O)f))" "Array.prototype.includes/indexOf/lastIndexOf(searchElement, fromIndex)" r
`!p autojump_if_blank(snip, [2])
`.`!p snip.rv = words_to_function(match.group(1))`(${1:searchElement}${2:, ${3:fromIndex}})$0
endsnippet

snippet .join "Array.prototype.join(separator)" i
.join(${1:"${2:,}"})$0
endsnippet

snippet "\.(pop|reverse|shift|to(?:(\sr|R)eversed)|to(?:(\ss|S)tring))" "Array.prototype.pop/reverse/shift/toReversed/toString()" r
.`!p snip.rv = words_to_function(match.group(1))`()$0
endsnippet

context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet "\.(reduce(?:(\sr|R)ight)?)" "Array.prototype.reduce/reduceRight(callbackFn, initialValue)" r
`!p autojump_if_blank(snip, [5])
`.`!p snip.rv = words_to_function(match.group(1))`(${2:(${3:acc}, ${4:currentValue}) => ${5:\{}$6`!p snip.rv = maybe_spaces(t[5]) + closing_character(t[5])`}, ${1:initialValue})$0
endsnippet

context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet .slice "(Array|String).prototype.slice(indexStart, indexEnd)" i
`!p autojump_if_blank(snip, [1, 3])
`.slice(${1:${2:indexStart}${3:, ${4:indexEnd}}})$0
endsnippet

context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet "\.(sort|to(?:(\ss|S)orted))" "Array.prototype.sort/toSorted(compareFn)" r
`!p autojump_if_blank(snip, [1, 4])
`.`!p snip.rv = words_to_function(match.group(1))`(${1:(${2:a}, ${3:b}) => ${4:\{}$5`!p snip.rv = maybe_spaces(t[4]) + closing_character(t[4])`})$0
endsnippet

context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet "\.(splice|to(?:(\ss|S)pliced))" "Array.prototype.splice/toSpliced(start, deleteCount, item1, item2, ...)" r
`!p autojump_if_blank(snip, [2, 4, 6])
`.splice(${1:start}${2:, ${3:deleteCount}${4:, ${5:item1}${6:, ${7:item2}}}})$0
endsnippet

context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet "\.(to(?:(\sl|L)ocale)(?:(\ss|S)tring))" "Array.prototype.toLocaleString(locales, options)" r
`!p autojump_if_blank(snip, [1, 3])
`.toLocaleString(${1:${2:locales}${3:, ${4:options}}})$0
endsnippet

snippet .with "Array.prototype.with(index, value)" i
.with(${1:index}, ${2:value})$0
endsnippet
