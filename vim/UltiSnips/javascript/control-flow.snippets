global !p

# ~/.vim/pythonx/vim_pythonx_helpers.py
from vim_pythonx_helpers import (
    autojump_if_blank,
    make_context,
    make_jumper
)

# ~/.vim/pythonx/javascript_helpers.py
from javascript_helpers import (
    maybe_semi
)


def maybe_block_end(tabstop):
    return "\n  }" if tabstop == " {" else ""

endglobal

context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet "\b(break|continue)" "break statement" r
`!p autojump_if_blank(snip, [1])
``!p snip.rv = match.group(1)`${1: ${2:label}}`!p snip.rv = maybe_semi()`$0
endsnippet

context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet case "case clause for a switch statement" b
`!p autojump_if_blank(snip, [2])
`case ${1:value}:${2: \{}
  ${3:// statements}${4:
  break`!p maybe_semi(snip)`}`!p snip.rv = maybe_block_end(t[2])`$0
endsnippet

snippet "else if" "else if statement (use during if statement)" b
} else if (${1:condition}) {
  ${2:// do something else}$0
endsnippet

context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet if "if...else" b
`!p autojump_if_blank(snip, [3])
`if (${1:condition}) {
  ${2:${VISUAL:\/\/ do something}}
}${3: else {
  ${4:// do something else}
}}$0
endsnippet

snippet "\b(return|throw)" "multi-line (return|throw) statement" r
`!p snip.rv = match.group(1)` (
  ${0:${VISUAL}}
)`!p maybe_semi(snip)`
endsnippet

# NOTE: Autojumping if the `break` statements (tabstops 5 & 9) are blank seem
# to break autojumping for the rest of the snippet, so I've removed them for now
context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet switch "switch statement" b
`!p autojump_if_blank(snip, [3, 7, 10])
`switch (${1:expression}) {
  case ${2:value1}:${3: \{}
    ${4:// statements}${5:
    break`!p maybe_semi(snip)`}`!p snip.rv = maybe_block_end(t[3])`
  case ${6:value2}:${7: \{}
    ${8:// statements}${9:
    break`!p maybe_semi(snip)`}`!p snip.rv = maybe_block_end(t[7])`
  default:${10: \{}
    ${11:// statements}`!p snip.rv = maybe_block_end(t[10])`
}$0
endsnippet

context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet try "try...catch statement" b
`!p autojump_if_blank(snip, [2, 5])
`try {
  ${1:// try statements}
${2:\} catch (${3:exceptionVar}) \{
  ${4:// catch statements}
}${5:\} finally \{
  ${6:// finally statements}
}}$0
endsnippet
