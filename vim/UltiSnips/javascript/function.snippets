global !p

# ~/.vim/pythonx/vim_pythonx_helpers.py
from vim_pythonx_helpers import (
    autojump_if_blank,
    make_context,
    make_jumper
)

# ~/.vim/pythonx/global_helpers.py
from global_helpers import (
    closing_character
)

# ~/.vim/pythonx/javascript_helpers.py
from javascript_helpers import (
    maybe_spaces
)

# ~/.vim/pythonx/javascript/function.py
from javascript.function import (
    initialize_args
)

endglobal

context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet "arrow function" "arrow function expression" i
`!p autojump_if_blank(snip, [1, 3])
`${1:(}${2:params}`!p snip.rv = closing_character(t[1])` => ${3:{
  $4
}}$0
endsnippet

context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet "\barrow (iife|IIFE)" "arrow IIFE" r
`!p autojump_if_blank(snip, [1])
`(${1:async }(${3:$2}) => {
  ${4:// statements}
})(${2:args})$0
endsnippet

context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet .bind "Function.prototype.bind(thisArg, arg1, /* â€¦, */ argN)" i
`!p autojump_if_blank(snip, [2])
`.bind(${1:thisArg}${2:, ${3:arg1}$4})$0
endsnippet

# NOTE: snip.tabstops[5] cannot be used here due to it being nested within
# snip.tabstops[4]. So, we have to take the outer tabstop.
context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop); initialize_args(snip, 4, 6)"
snippet class "class declaration" w
`!p autojump_if_blank(snip, [2])
`class ${1:`!p snip.rv = snip.basename`}${2: extends ${3:SuperClass}} {
${4:  constructor($5) \{$6
  \}}
}$0
endsnippet

# NOTE: Because $1 is at the very beginning of the snippet, there seems to be a
# problem getting auto jump to work when it is deleted. If you put even just a
# single space at the beginning of the snippet, things start working as
# expected, but then you're left with an unwanted space at the beginning.
# Unsure how to fix, but I've filed an issue about the problem:
# https://github.com/reconquest/vim-pythonx/issues/16
context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet "^function" "top level function declaration" r
`!p autojump_if_blank(snip, [3, 4])
`${1:export ${2:default }}${3:async }function${4:*} ${5:functionName}(${6:params}) {
  $7
}$0
endsnippet

snippet "(?<!^)(?<!arrow )(?<!\()(?<!{)function" "choose arrow or normal function expression" r
${1|arrow function,function declaration,function expression,iife|}$0
endsnippet

context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet "(\(|{)function" "arrow function expression within a parameter or interpolated" r
`!p autojump_if_blank(snip, [1, 3])
``!p snip.rv = match.group(1)`${1:(}${2:params}`!p snip.rv = closing_character(t[1])` => ${3:\{}$4`!p snip.rv = maybe_spaces(t[3]) + closing_character(t[3])`$0
endsnippet

# NOTE: Same issue as "^function" snippet.
context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet "function declaration" "function declaration" r
`!p autojump_if_blank(snip, [1, 2])
`${1:async }function${2:*} ${3:functionName}(${4:params}) {
  $5
}$0
endsnippet

context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet "function expression" "function expression" w
`!p autojump_if_blank(snip, [1])
`function${1:*} (${2:params}) {
  $3
}$0
endsnippet

context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet "\bfunction (iife|IIFE)" "function IIFE" r
`!p autojump_if_blank(snip, [1])
`(${1:async }function (${3:$2}) {
  ${4:// statements}
})(${2:args});$0
endsnippet

snippet "\b(?<!arrow )(?<!function )(IIFE|iife)" "Immediately Invoked Function Expression" r
${1|arrow iife,function iife|}$0
endsnippet
