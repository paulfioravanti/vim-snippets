global !p

# https://github.com/reconquest/vim-pythonx
from px.snippets import (
    advance_jumper,
    get_jumper_position,
    get_jumper_text,
    make_context,
    make_jumper
)

# ~/.vim/pythonx/global_helpers.py
from global_helpers import (
    closing_character
)

# ~/.vim/pythonx/javascript_helpers.py
from javascript_helpers import (
    maybe_spaces
)

def initialize_args(snip, init_tabstop_index, starting_tabstop_index):
    if not (args_tabstop := snip.tabstops[init_tabstop_index]):
        return

    # Strip out all the surrounding tabstop characters
    args_list = (
        args_tabstop
        .current_text
        .removeprefix("  constructor(")
        .removesuffix(") {\n  }")
        .split(",")
    )

    args = [string.strip() for string in args_list if string]
    tabstop_indexes = range(
        starting_tabstop_index,
        starting_tabstop_index + len(args)
    )

    output = ""
    for arg, index in zip(args, tabstop_indexes, strict=True):
        output += f"\n  this.{arg} = ${{{index}:{arg}}};"

    snip.expand_anon(output)

def jump_if_blank(snip, positions):
    if get_jumper_position(snip) in positions:
        if not get_jumper_text(snip):
            advance_jumper(snip)

endglobal

snippet "arrow function" "arrow function expression" i
${1:(}${2:params}`!p snip.rv = closing_character(t[1])` => ${3:{
  $5
}}$0
endsnippet

snippet "\barrow (iife|IIFE)" "arrow IIFE" r
(${1:async }(${3:$2}) => {
  ${4:// statements}
})(${2:args})$0
endsnippet

snippet .bind "Function.prototype.bind(thisArg, arg1, /* â€¦, */ argN)" i
.bind(${1:thisArg}${2:, ${3:arg1}}$4)$0
endsnippet

# NOTE: snip.tabstops[5] cannot be used here due to it being nested within
# snip.tabstops[4]. So, we have to take the outer tabstop.
post_jump "if snip.tabstop == 6: initialize_args(snip, 4, 6)"
snippet class "class declaration" w
class ${1:`!p snip.rv = snip.basename`}${2: extends ${3:SuperClass}} {
${4:  constructor($5) \{$6
  \}}
}$0
endsnippet

# NOTE: Because $1 is at the very beginning of the snippet, there seems to be a
# problem getting auto jump to work when it is deleted. If you put even just a
# single space at the beginning of the snippet, things start working as
# expected, but then you're left with an unwanted space at the beginning.
# Unsure how to fix...
context "make_context(snip)"
post_jump "make_jumper(snip, snip.tabstop)"
snippet "^function" "top level function declaration" r
`!p jump_if_blank(snip, [1, 2, 3, 4])
`${1:export ${2:default }}${3:async }function${4:*} ${5:functionName}(${6:params}) {
  $7
}$0
endsnippet

snippet "(?<!^)(?<!arrow )(?<!\()(?<!{)function" "choose arrow or normal function expression" r
${1|arrow function,function declaration,function expression,iife|}$0
endsnippet

snippet "(\(|{)function" "arrow function expression within a parameter or interpolated" r
`!p snip.rv = match.group(1)`${1:(}${2:params}`!p snip.rv = closing_character(t[1])` => ${3:\{}$4`!p snip.rv = maybe_spaces(t[3]) + closing_character(t[3])`$0
endsnippet

snippet "function declaration" "function declaration" r
${1:async }function${2:*} ${3:functionName}(${4:params}) {
  $5
}$0
endsnippet

snippet "function expression" "function expression" w
function${1:*} (${2:params}) {
  $3
}$0
endsnippet

snippet "\bfunction (iife|IIFE)" "function IIFE" r
(${1:async }function (${3:$2}) {
  ${4:// statements}
})(${2:args});$0
endsnippet

snippet "\b(?<!arrow )(?<!function )(IIFE|iife)" "Immediately Invoked Function Expression" r
${1|arrow iife,function iife|}$0
endsnippet
