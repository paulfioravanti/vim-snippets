global !p

# ~/.vim/pythonx/global_helpers.py
from global_helpers import (
    closing_character
)

# ~/.vim/pythonx/javascript_helpers.py
from javascript_helpers import (
    maybe_semi,
    maybe_spaces
)

endglobal

snippet .bind "Function.prototype.bind(thisArg, arg1, /* â€¦, */ argN)" i
.bind(${1:thisArg}${2:, ${3:arg1}}$4)$0
endsnippet

snippet "^function" "top level function declaration" r
${1:export ${2:default }}function${3:*} ${4:functionName}(${5:params}) {
  $6
}$0
endsnippet

snippet "(?<!^)function" "choose arrow or normal function expression" r
${1|arrow function,function declaration,function expression|}$0
endsnippet

snippet "(\(|{)function" "arrow function expression within a parameter or interpolated" r
`!p snip.rv = match.group(1)`${1:(}${2:params}`!p snip.rv = closing_character(t[1])` => ${3:\{}$4`!p snip.rv = maybe_spaces(t[3]) + closing_character(t[3])`$0
endsnippet

snippet "arrow function" "arrow function expression" i
${1:(}${2:params}`!p snip.rv = closing_character(t[1])` => ${3:{
  $5
}`!p maybe_semi(snip)`}$0
endsnippet

snippet "function declaration" "function declaration" r
function${1:*} ${2:functionName}(${3:params}) {
  $4
}$0
endsnippet

snippet "function expression" "function expression" w
function${1:*} (${2:params}) {
  $3
}`!p maybe_semi(snip)`$0
endsnippet
